{"version":3,"sources":["webpack:///webpack/bootstrap ae3f8ba2f065f0e89a2b","webpack:///./lib/util.js","webpack:///./lib/orbit.js","webpack:///./lib/three_util/scene_util.js","webpack:///./lib/three_util/lights_util.js","webpack:///./lib/planet.js","webpack:///./lib/ship.js","webpack:///./lib/sky.js","webpack:///./lib/moon.js","webpack:///./lib/asteroid.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;AAEA;;;;;;AAMA;;;;AAIA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA,eAAe;AACf,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjGA;AAAA,WAAW,0CAA0C;AAIpD;;AAGqC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,QAAQ;;;AAG5D;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;;;AAGA;;AAEA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;;AAEzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,qDAAqD,iBAAiB;AACtE;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;AAEA;;;;;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/Te;AACE;;;AAGjB,WAAW;AACX;AACA,IAAI;;;AAGJ;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB,0BAA0B;AAC1B,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChEgB;AACC;;;AAGjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+GAAgE;;AAEhE;AACA,4CAA4C;;AAE5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;;AAEA;AACA,kFAA6B;AAC7B;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;AC1Ce;AACgB;;;AAG/B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8CAA8C;AAC9C,iDAAiD;AACjD;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;;;AAGA;;;;;;;;;AC3BiB;;AAEjB;AACA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA,gDAAgD,6GAA8D;;AAE9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD,6GAA8D;AACjH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,mDAAmD,sCAAsC;AACzF;AACA;AACA;AACA;;;;;AAKA;AACA;AACA,oDAAoD,6GAA8D;AAClH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA,uDAAuD,6GAA8D;AACrH;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,kDAAkD,0IAA2F;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gHAAiE;AACnH;;AAEA;AACA;;AAEA;AACA,gDAAgD,4GAA6D;AAC7G;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;;;AAGA;;;;;;;;;ACjLiB;;;AAGjB;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C,yCAAyC;AACzC;AACA,GAAG;;AAEH;AACA,iBAAiB;;AAEjB,iBAAiB,UAAU;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc,eAAe;AAC7B;;AAEA;AACA,wBAAwB;AACxB,oCAAoC;;AAEpC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC;;AAEA;AACA;AACA;;;AAGA;;;;;;;;;ACjFiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;;AAGA;;;;;;;;;ACrB+B;;;AAG/B;AACA;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae3f8ba2f065f0e89a2b","export const Colors = {\n  red:         0xf25346,\n  white:       0xd8d0d1,\n  brown:       0x000000,\n  pink:        0xF5986E,\n  brownDark:   0x000000,\n  blue:        0x68c3c0,\n\n  mustard:    0xffe066,\n  grey:       0x50514f,\n  pinkNeon:   0xff1654,\n\n\n  ship:       0xffffff,\n  light:      0x68c3c0, // blue: 0x68c3c0 //yellow: 0xffe066 //pinkChill: 0xF5986E  // red: 0xf25346\n  // light:      0xf25346, //red\n  // light:      0xF5986E, //pinkOrange\n  // light:      0xffe066, //mustard\n};\n\n\nconst lightColors = [\n  0x68c3c0, // blue,\n  0xf25346, //red\n  // 0xF5986E, //pinkOrange,\n  0xffe066, //mustard\n  // 0xF5986E, // chillpink\n  // 0xf78764, //melon\n  // 0xf0d3f7, //lavander\n  // 0xa4f9c8, //mint\n];\n\n\nexport function selectRandomColor() {\n\n\n  currentColor = lightColors[Math.floor(Math.random()*lightColors.length)];\n}\n\nexport let currentColor = 0x68c3c0;\n\n\n\n\n\n//----------------------------\n\n\n\n//\n//\n//\n// for (var i = 0; i < array.length; i++) {\n//   array[i]\n// }\n//\n//\n//\n// setInterval()\n//\n//\n//\n// function x(startVal, endVal, 5000) {\n//   if (startVal === endVal) { return }\n//\n//   console.log(startVal);\n//\n//   setTimeOut( x(startVal--, endVal, time), 250)\n//\n//   // startVal --;\n// }\n//\n// function countDown (startVal, endVal, time, fun) {\n//   let stepLength = time/(startVal - endVal);\n//\n//   for (var i = startVal; i > endVal; i--) {\n//\n//     setTimeOut( () => {\n//       fun(); // feed in a callback to be executed\n//     }, stepLength)\n//   }\n// }\n//\n//\n// setTimeOut( () => {\n//\n// }, stepLength)\n//\n//\n//\n// camera.position.x =\n//\n//\n//\n//\n//\n//\n// colorHexCode = countDown()\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util.js\n// module id = 0\n// module chunks = 0","// import { Colors, selectRandomColor, currentColor } from './util';\nimport { scene, createScene, windowHeight, windowWidth,\n         camera, fieldOfView, aspectRatio, nearPlane,\n         farPlane, renderer, gameContainer\n} from './three_util/scene_util';\n\nimport { ambientLight, hemisphereLight,\n         overheadLight, createLights } from './three_util/lights_util';\n\n// import Game from './game';\nimport Planet from './planet';\nimport SpaceShip from './ship';\nimport Sky from './sky';\nimport Moon from './moon';\nimport Asteroid from './asteroid';\n// import AllAsteroids from './asteroid_sky';\n\n\n\nwindow.addEventListener('load', init, false);\n\nfunction init() {\n  let playerHP = document.getElementById(\"playerHP\");\n\n  createScene();\n  createLights();\n\n  createShip();\n  createPlanet();\n  createSky();\n  createMoons();\n  createAsteroids();\n\n  document.addEventListener('mousemove', handleCursorUpdate, false);\n  loop();\n}\n\n\n/*----------------GAME INSTANCE----------------------*/\n// export let game = new Game();\n// let newTime = new Date().getTime();\n// let oldTime = new Date().getTime();\nlet startTime = new Date().getTime();\nlet currentTime = new Date().getTime();\n\nlet asteroidsArray = [];\n/*--------------------------------------------------*/\n\n\n\n\n/*==========================Object_Creators==========================*/\n\n/*--------------------------Planet-----------------------------------*/\nconst planet = new Planet();\nconst createPlanet = function createPlanet(){\n  planet.mesh.position.y = -600;\n  scene.add(planet.mesh);\n};\n/*--------------------------Sky-------------------------------------*/\nconst sky = new Sky();\nfunction createSky(){\n  sky.mesh.position.y = -700;\n  sky.mesh.position.z = -600;\n  scene.add(sky.mesh);\n}\n/*--------------------------Ship-------------------------------------*/\nexport const spaceship = new SpaceShip();\nfunction createShip(){\n  spaceship.mesh.scale.set(.20,.20,.20);\n  spaceship.mesh.position.y = 100;\n  // spaceship.mesh.rotation.x = 100;\n  scene.add(spaceship.mesh);\n}\n/*--------------------------Moons-------------------------------------*/\nconst moon1 = new Moon();\nconst moon2 = new Moon();\nfunction createMoons(){\n  moon1.mesh.position.y = 60; // push it a little bit at the bottom of the scene\n  moon1.mesh.position.x = -560;\n  moon1.mesh.position.z = -660;\n\n  moon2.mesh.position.y = 280;\n  moon2.mesh.position.x = 260;\n  moon2.mesh.position.z = -360;\n  scene.add(moon1.mesh);\n  scene.add(moon2.mesh);\n}\n/*--------------------------Asteroids---------------------------------*/\n// const asteroid = new Asteroid();\n// function createAsteroids(){\n//   asteroid.mesh.scale.set(.90,.90,.90);\n//   asteroid.mesh.position.y = 10 + (Math.random()*180);\n//   // asteroid.mesh.position.x = 80;\n//   asteroid.mesh.position.x = 250;\n//   scene.add(asteroid.mesh);\n// }\n\nlet singleAst;\nlet asteroid;\nfunction createAsteroids(){\n\n  for (var i = 0; i < 20; i++) {\n    asteroid = new Asteroid();\n    asteroid.mesh.scale.set(1.90, 1.90, 1.90);\n    asteroid.mesh.position.y = 20 + (Math.random()*170);\n    asteroid.mesh.position.x = 500 + (i * Math.random()*200);\n    scene.add(asteroid.mesh);\n    asteroidsArray.push(asteroid);\n  }\n}\n\n\n/*-------------------------------------------------------------------*/\n\n// let playTime;\nlet positionComparison;\nlet distanceBetweenX;\nlet distanceBetweenY;\nlet speedup;\nlet counter = 0;\nlet loop = function loop(){\n  // counter++;\n  // document.getElementById(\"time\").innerHTML = `${counter}`;\n\n\n  overheadLight.intensity = 0.3;\n  speedup = 0.3 / (spaceship.health*.01);\n\n\n  sky.mesh.rotation.z += .0003;\n  planet.mesh.rotation.z += .001;\n  // planet.mesh.position.y += Math.sin(0.05);\n\n  moon2.mesh.rotation.y += .001;\n  moon2.mesh.rotation.x += .003;\n  moon2.mesh.rotation.z += .001;\n\n  moon1.mesh.rotation.y += .002;\n  moon1.mesh.rotation.x += .002;\n  moon1.mesh.rotation.z += .002;\n\n  for (var i = 0; i < asteroidsArray.length; i++) {\n    singleAst = asteroidsArray[i];\n    updateAsteroids(singleAst);\n  }\n\n\n  if (spaceship.health > 0) {\n\n    updateShip();\n\n  } else {\n\n    // when you die loose game over\n    spaceship.mesh.rotation.y += (-Math.PI/2)*.07;\n    spaceship.mesh.position.y -= 1.05;\n    spaceship.mesh.position.x -= .85;\n    document.getElementById(\"game-over\").style.display = `block`;\n  }\n\n\n\n\n\n\n  renderer.render(scene, camera);\n  requestAnimationFrame(loop);\n};\n\n// initialize\nlet cursorPosition = {\n  x: 0,\n  y: 0\n};\n\n// MouseEvent clientY & clientX: w3schools.com/jsref/event_clienty.asp\nfunction handleCursorUpdate(event) {\n  // console.log('x', event.clientX);\n  // console.log('y', event.clientY);\n  event.preventDefault();\n  // Reduce value to something between -1 and 1;\n  let deltaX = (-1 + (event.clientX / windowWidth)*2);\n  // inverse because the 2D y-axis goes the opposite direction of the 3D y-axis\n  let deltaY = 1 - (event.clientY / windowHeight)*2;\n  // let deltaY = (-1 + (event.clientY / windowWidth)*4); // inverse joystick mode\n\n  cursorPosition = {\n    x: deltaX,\n    y: deltaY\n  };\n}\n\nfunction updateShip(){\n  let updatedX = normalize(cursorPosition.x, -1, 1, -20, 20);\n  let updatedY = normalize(cursorPosition.y, -1, 1, 25, 175);\n  // let updatedY = normalize(cursorPosition.y, -1, 1, 25, 175);\n\n  spaceship.mesh.position.y = updatedY;\n  spaceship.mesh.position.x = updatedX;\n\n  spaceship.JetFire.rotation.x += 0.3;\n  // spaceship.JetFire.scale.x += 0.3;\n}\n\nfunction updateAsteroids(a) {\n  // a.mesh.position.x -= 1.5;\n  a.mesh.position.x -= 1.5;\n  a.mesh.rotation.y += .01;\n  a.mesh.rotation.z += .01;\n\n\n  positionComparison = {\n    x:  (spaceship.mesh.position.x - a.mesh.position.x),\n    y:  (spaceship.mesh.position.y - a.mesh.position.y)\n  };\n\n  distanceBetweenX = Math.abs(positionComparison.x);\n  distanceBetweenY = Math.abs(positionComparison.y);\n\n\n\n\n  if (Math.floor(distanceBetweenX) < 30 && distanceBetweenY < 15) {\n    handleCrash(a);\n  }\n\n  if (a.mesh.position.x <= -200) {\n    a.mesh.position.x = 230 + Math.random()*20;\n    a.mesh.position.y = 20 + (Math.random()*170);\n  }\n}\n\nfunction handleCrash(hitAsteroid) {\n  overheadLight.intensity = 20;\n  // hitAsteroid.mesh.scale.set(2.90, 2.90,2.90);\n  // hitAsteroid.mesh.position.x = 230 + Math.random()*20;\n  // hitAsteroid.mesh.position.y = 20 + (Math.random()*170);\n  spaceship.mesh.rotation.x -= 20;\n\n\n  spaceship.decreaseHP();\n  document.getElementById(\"playerHP\").style.fontSize = \"60px\";\n  document.getElementById(\"playerHP\").innerHTML = `${spaceship.health}`;\n  setTimeout(() => document.getElementById(\"playerHP\").style.fontSize = \"20px\", 500)\n  setTimeout(() => spaceship.mesh.rotation.x = 0, 300)\n\n\n\n  selectRandomColor();\n  ambientLight.color.setHex( currentColor );\n  hemisphereLight.color.setHex( currentColor );\n  overheadLight.color.setHex( currentColor );\n  scene.fog.color.setHex( currentColor );\n}\n\n\n\nfunction normalize(v,vmin,vmax,tmin, tmax){\n  let nv = Math.max(Math.min(v,vmax), vmin);\n  let dv = vmax-vmin;\n  let pc = (nv-vmin)/dv;\n  let dt = tmax-tmin;\n  let tv = tmin + (pc*dt);\n  return tv;\n}\n\n\n\n\n\n\n//--------------------------------\nexport const Colors = {\n  red:         0xf25346,\n  white:       0xd8d0d1,\n  brown:       0x000000,\n  pink:        0xF5986E,\n  brownDark:   0x000000,\n  blue:        0x68c3c0,\n\n  mustard:    0xffe066,\n  grey:       0x50514f,\n  pinkNeon:   0xff1654,\n\n\n  ship:       0xffffff,\n  light:      0x68c3c0, // blue: 0x68c3c0 //yellow: 0xffe066 //pinkChill: 0xF5986E  // red: 0xf25346\n  // light:      0xf25346, //red\n  // light:      0xF5986E, //pinkOrange\n  // light:      0xffe066, //mustard\n};\n\n\nconst lightColors = [\n  0x68c3c0, // blue,\n  0xf25346, //red\n  // 0xF5986E, //pinkOrange,\n  0xffe066, //mustard\n  // 0xF5986E, // chillpink\n  // 0xf78764, //melon\n  // 0xf0d3f7, //lavander\n  // 0xa4f9c8, //mint\n];\n\n\nexport function selectRandomColor() {\n\n\n  currentColor = lightColors[Math.floor(Math.random()*lightColors.length)];\n}\n\nexport let currentColor = 0x68c3c0;\n\n\n\n\n//----------------------------------------------------------//\n// var audio = new Audio('audio_file.mp3');\n// audio.play();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/orbit.js\n// module id = 1\n// module chunks = 0","import { game } from '../orbit';\nimport { Colors } from '../util';\n\n\n// import { game, deltaTime, newTime, oldTime, ennemiesPool,\n//          particlesPool, particlesInUse, resetGame\n// } from './game';\n\n\nexport let camera, fieldOfView,\naspectRatio, nearPlane, farPlane, renderer, gameContainer;\n\nexport let scene = new THREE.Scene();\nexport let windowHeight, windowWidth;\n\n\nexport const createScene = function createScene() {\n  windowWidth = window.innerWidth;\n  windowHeight = window.innerHeight;\n\n  scene.fog = new THREE.Fog(Colors.light, 100, 950);\n\n  // Create the camera\n  aspectRatio = windowWidth / windowHeight;\n  fieldOfView = 60; // FIXME: orig 60\n  // fieldOfView = 160; // /FIXME: orig 60 super zoom out\n  nearPlane = 1;\n  farPlane = 10000;\n  camera = new THREE.PerspectiveCamera(\n    fieldOfView,\n    aspectRatio,\n    nearPlane,\n    farPlane\n    );\n\n  // Set the position of the camera\n  camera.position.x = 10; // originally 10\n  camera.position.z = 200; // originally 200\n  camera.position.y = 120; // orig 120\n\n  // Create the renderer\n  renderer = new THREE.WebGLRenderer({\n    alpha: true, // Allow transparency to show the CSS gradient background\n    antialias: true // less efficient, check back on this FIXME:\n  });\n\n  renderer.setSize(windowWidth, windowHeight);\n  renderer.shadowMap.enabled = true;\n\n  // Append renderer to the HTML container\n  gameContainer = document.getElementById('world');\n  gameContainer.appendChild(renderer.domElement);\n\n  // update camera and renderer on window resize\n  window.addEventListener('resize', handleWindowResize, false);\n}\n\nfunction handleWindowResize() {\n  // update height and width of the renderer and the camera\n  windowHeight = window.innerHeight;\n  windowWidth = window.innerWidth;\n  renderer.setSize(windowWidth, windowHeight);\n  camera.aspect = windowWidth / windowHeight;\n  camera.updateProjectionMatrix();\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/three_util/scene_util.js\n// module id = 2\n// module chunks = 0","import { scene } from './scene_util';\nimport { Colors } from '../util';\n\n\nexport let ambientLight;\nexport let hemisphereLight;\nexport let overheadLight;\n\nexport function createLights() {\n  hemisphereLight = new THREE.HemisphereLight(Colors.light, 0x000000, .9)\n  ambientLight = new THREE.AmbientLight(Colors.light, .5);\n  //overhead is shining from above\n  overheadLight = new THREE.DirectionalLight(Colors.light, 0.9); // // NOTE: flash this on impact!\n\n  // Set the direction of the light\n  overheadLight.position.set(150, 350, 350); // first value is X pos, could move to simulate sun movement\n\n  // Allow shadow casting\n  overheadLight.castShadow = true;\n\n  // define visible area of the projected shadow\n  overheadLight.shadow.camera.left = -400;\n  overheadLight.shadow.camera.right = 400;\n  overheadLight.shadow.camera.top = 400;\n  overheadLight.shadow.camera.bottom = -400;\n  overheadLight.shadow.camera.near = 1;\n  overheadLight.shadow.camera.far = 1000;\n  overheadLight.shadow.mapSize.width = 4096;\n  overheadLight.shadow.mapSize.height = 4096;\n\n  // shadow resolution; orig 2048 on both, try to optimize by reducing:\n  overheadLight.shadow.mapSize.width = 2048;\n  overheadLight.shadow.mapSize.height = 2048;\n\n  // to activate the lights, just add them to the scene\n  scene.add(hemisphereLight);                  // NOTE: try removing or reducing this for nigth time background\n  scene.add(overheadLight);\n  scene.add(ambientLight);\n\n  // let cameraHelper = new THREE.CameraHelper(overheadLight.shadow.camera);\n  // scene.add(cameraHelper);\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/three_util/lights_util.js\n// module id = 3\n// module chunks = 0","import { game } from './orbit';\nimport { Colors, currentColor } from './util';\n\n\nconst Planet = function Planet(){\n  // radius top, radius bottom, height, number of segments on the radius, number of segments vertically\n  var geomPlanet = new THREE.CylinderGeometry(590, 590, 400, 40, 10);\n\n  // rotate the planet on the x axis\n  geomPlanet.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI/2));\n  geomPlanet.mergeVertices();\n  var l = geomPlanet.vertices.length;\n\n  var material = new THREE.MeshPhongMaterial({wireframe:false,\n  // var material = new THREE.MeshBasicMaterial({wireframe:false,\n    color:Colors.light,\n    transparent:true,\n    opacity:.9,                             // NOTE planet opacity\n    shading:THREE.FlatShading,\n  });\n\n\n  this.mesh = new THREE.Mesh(geomPlanet, material);\n  this.mesh.receiveShadow = true;\n};\n\n\nexport default Planet;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/planet.js\n// module id = 5\n// module chunks = 0","import { Colors } from './util';\n\nclass SpaceShip {\n  constructor() {\n\n    this.health = 500;\n\n\n\n    this.mesh = new THREE.Object3D();\n    this.mesh.name = \"spaceShip\";\n\n    // Cabin\n    let geomCabin = new THREE.BoxGeometry(180,5,5,1,1,1);\n    let matCabin = new THREE.MeshPhongMaterial({wireframe:false, color:Colors.ship, shading:THREE.FlatShading});\n\n    geomCabin.vertices[4].y+=10;\n    geomCabin.vertices[4].z-=20;\n    geomCabin.vertices[5].y+=10;\n    geomCabin.vertices[5].z+=20;\n    geomCabin.vertices[6].y-=10;\n    geomCabin.vertices[6].z-=20;\n    geomCabin.vertices[7].y-=10;\n    geomCabin.vertices[7].z+=20;\n\n    let cabin = new THREE.Mesh(geomCabin, matCabin);\n    cabin.castShadow = true;\n    cabin.receiveShadow = true;\n    this.mesh.add(cabin);\n\n    // Wings\n    let geomSideWing = new THREE.BoxGeometry(30,3,180,1,1,1);\n    let matSideWing = new THREE.MeshPhongMaterial({wireframe:false, color:Colors.ship, shading:THREE.FlatShading});\n    let sideWing1 = new THREE.Mesh(geomSideWing, matSideWing);\n    let sideWing2 = new THREE.Mesh(geomSideWing, matSideWing);\n    sideWing1.position.set(-75,-3, 0);\n    sideWing2.position.set(-75,-3, 0);\n    sideWing2.rotation.x = Math.PI*1.07;\n    sideWing1.rotation.x = -Math.PI*1.07;\n\n    geomSideWing.vertices[4].y+=5;\n    geomSideWing.vertices[4].z-=2;\n\n    sideWing1.castShadow = true;\n    sideWing1.receiveShadow = true;\n    sideWing2.castShadow = true;\n    sideWing2.receiveShadow = true;\n    this.mesh.add(sideWing1);\n    this.mesh.add(sideWing2);\n\n\n    // laserbeam\n    // let geomLaser = new THREE.CylinderGeometry(1, 1, 1900, 10);\n    // let matLaser = new THREE.MeshPhongMaterial({wireframe:true, color:Colors.pinkNeon});\n    // let laserBeam = new THREE.Mesh(geomLaser, matLaser);\n    // laserBeam.position.set(940,-22, 86);\n    // laserBeam.rotation.z = Math.PI/2;\n    // this.mesh.add(laserBeam);\n\n\n\n\n    // wingspears\n    let geomWingSpear = new THREE.CylinderGeometry(2.2, 2.2, 50, 10);\n    let matWingSpear = new THREE.MeshPhongMaterial({wireframe:false, color:Colors.ship, shading:THREE.FlatShading});\n    let wingSpear1 = new THREE.Mesh(geomWingSpear, matWingSpear);\n    let wingSpear2 = new THREE.Mesh(geomWingSpear, matWingSpear);\n    let wingSpear3 = new THREE.Mesh(geomWingSpear, matWingSpear);\n    let wingSpear4 = new THREE.Mesh(geomWingSpear, matWingSpear);\n\n    // front bottom\n    wingSpear1.position.set(-42,-22, 86);\n    wingSpear1.rotation.z = Math.PI/2;\n\n    // back bottom\n    wingSpear4.position.set(-42,-22, -86);\n    wingSpear4.rotation.z = Math.PI/2;\n\n    // front top\n    wingSpear2.position.set(-42, 16, 86);\n    wingSpear2.rotation.z = Math.PI/2;\n\n    // back top\n    wingSpear3.position.set(-42, 16, -86);\n    wingSpear3.rotation.z = Math.PI/2;\n    //\n    this.mesh.add(wingSpear1);\n    this.mesh.add(wingSpear2);\n    this.mesh.add(wingSpear3);\n    this.mesh.add(wingSpear4);\n\n    wingSpear1.castShadow = true;\n    wingSpear2.castShadow = true;\n    wingSpear3.castShadow = true;\n    wingSpear4.castShadow = true;\n\n\n    // mainThruster\n    let geomMainThruster = new THREE.CylinderGeometry(5, 10, 20, 10);\n    let matMainThruster = new THREE.MeshPhongMaterial({wireframe:false, color:Colors.ship, shading:THREE.FlatShading});\n    let mainThruster = new THREE.Mesh(geomMainThruster, matMainThruster);\n    mainThruster.position.set(-100,0, 0);\n    mainThruster.rotation.z = Math.PI/2;\n\n    mainThruster.castShadow = true;\n    mainThruster.receiveShadow = true;\n    this.mesh.add(mainThruster);\n\n\n    // cockpit\n    let geomcockPit = new THREE.BoxGeometry(40,5,20,1,1,1);\n    let matcockPit = new THREE.MeshPhongMaterial({wireframe:false, color:Colors.grey,transparent:true, opacity:.8, shading:THREE.FlatShading});;\n    let cockpit = new THREE.Mesh(geomcockPit, matcockPit);\n    // geomcockPit.vertices[4].y+=10;\n    geomcockPit.vertices[4].z-=20;\n    // geomcockPit.vertices[5].y+=10;\n    // geomcockPit.vertices[5].z+=20;\n    geomcockPit.vertices[6].y-=10;\n    geomcockPit.vertices[6].z-=20;\n    geomcockPit.vertices[7].y-=10;\n    // geomcockPit.vertices[7].z+=20;\n\n\n    cockpit.position.set(-55,15,0);\n    cockpit.castShadow = true;\n    cockpit.receiveShadow = true;\n    this.mesh.add(cockpit);\n\n    let geomJetFire = new THREE.BoxGeometry(60,10,10,1,1,1);\n    geomJetFire.vertices[4].y-=5;\n    geomJetFire.vertices[4].z+=5;\n    geomJetFire.vertices[5].y-=5;\n    geomJetFire.vertices[5].z-=5;\n    geomJetFire.vertices[6].y+=5;\n    geomJetFire.vertices[6].z+=5;\n    geomJetFire.vertices[7].y+=5;\n    geomJetFire.vertices[7].z-=5;\n    let matJetFire = new THREE.MeshPhongMaterial({wireframe:false, color:Colors.mustard, shading:THREE.FlatShading});\n    this.JetFire = new THREE.Mesh(geomJetFire, matJetFire);\n\n    this.JetFire.castShadow = true;\n    this.JetFire.receiveShadow = true;\n\n    let geomBlade = new THREE.BoxGeometry(2,14,10,1,1,1);\n    let matBlade = new THREE.MeshPhongMaterial({wireframe:false, color:Colors.red, shading:THREE.FlatShading});\n    let blade1 = new THREE.Mesh(geomBlade, matBlade);\n    blade1.position.set(10,0,0);\n\n    blade1.castShadow = true;\n    blade1.receiveShadow = true;\n\n    let blade2 = blade1.clone();\n    blade2.rotation.x = Math.PI/2;\n\n    blade2.castShadow = true;\n    blade2.receiveShadow = true;\n\n    this.JetFire.add(blade1);\n    this.JetFire.add(blade2);\n    this.JetFire.position.set(-120,0,0);\n    this.JetFire.rotation.x = Math.PI/2;\n    this.mesh.add(this.JetFire);\n\n    this.mesh.castShadow = true;\n    this.mesh.receiveShadow = true;\n  }\n\n\n  decreaseHP(){\n    this.health -= 10;\n    this.health = Math.max(0, this.health);\n  }\n\n\n}\n\n\nexport default SpaceShip;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/ship.js\n// module id = 6\n// module chunks = 0","import { Colors } from './util';\n\n\nconst Star = function(){\n  // An empty container that will hold the different stars in the cluster\n  this.mesh = new THREE.Object3D();\n\n  // this shingle shape will be duplicated to create the starcluster\n  let geom = new THREE.BoxGeometry(1,1,1);  /// original starboxes\n  let mat = new THREE.MeshBasicMaterial({wireframe:true,\n    color:Colors.white,\n  });\n\n  // duplicate the geometry a random number of times\n  let nBlocs = 6; // number of stars in cluster\n\n  for (let i = 0; i<nBlocs; i++){\n    // create the mesh by cloning the cluster\n    let m = new THREE.Mesh(geom, mat);\n\n    // set the position and the rotation of each cube randomly\n    m.position.x = i*15;\n    m.position.y = Math.random()*70 + 800;\n    m.position.z = Math.random()*60;\n    m.rotation.z = Math.random()*Math.PI*2;\n    m.rotation.y = Math.random()*Math.PI*2;\n\n    // set the size of the cube randomly\n    let s = .1 + Math.random()*.9;\n    m.scale.set(s,s,s);\n\n    // allow each cube to cast and to receive shadows\n    m.castShadow = true;        // NOTE I dont think stars ever receive or cast shadows\n    m.receiveShadow = true;\n\n    // add the cube to the container we first created\n    this.mesh.add(m);\n  }\n};\n\n\nconst Sky = function(){\n  // empty container\n  this.mesh = new THREE.Object3D();\n\n  // choose a number of stars to be scattered in the sky\n  this.nStars = 50;\n\n  // To distribute the stars consistently,\n  // we need to place them according to a uniform angle\n  let stepAngle = Math.PI*2 / this.nStars;\n\n  // create star clusters\n  for(let i=0; i<this.nStars; i++){\n    let star = new Star();\n\n    // set the rotation and the position of each star;\n    let a = stepAngle*i; // this is the final angle of the star\n    let h = 750 + Math.random()*200; // this is the distance between the center of the axis and the star itself\n\n    // Trigonometry\n    // convert polar coordinates (angle, distance) into Cartesian coordinates (x, y)\n    star.mesh.position.y = Math.sin(a)*h;\n    star.mesh.position.x = Math.cos(a)*h;\n\n    // rotate the star according to its position\n    star.mesh.rotation.z = a + Math.PI/2;\n\n    // for depth percep, position the stars\n    // at random depths inside of the scene\n    star.mesh.position.z = -400-Math.random()*400;\n\n    // set a random scale for each star\n    let s = 1.5+Math.random()*1.4; // first num = inner radius // sec = width of doughnut\n    star.mesh.scale.set(s,s,s);\n\n    this.mesh.add(star.mesh);\n  }\n};\n\n\nexport default Sky;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/sky.js\n// module id = 7\n// module chunks = 0","import { Colors } from './util';\n\nclass Moon {\n  constructor() {\n    this.geom = new THREE.SphereGeometry(20, 20, 5);\n    // rotate the geometry on the x axis\n    // this.geom.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI/2));\n\n    this.mat = new THREE.MeshBasicMaterial({wireframe:true,\n      color:Colors.blue,\n      transparent:true,\n      opacity:.6,\n      shading:THREE.FlatShading,\n    });\n\n    this.mesh = new THREE.Mesh(this.geom, this.mat);\n    this.mesh.receiveShadow = true;\n  }\n}\n\n\nexport default Moon;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/moon.js\n// module id = 8\n// module chunks = 0","import { Colors, currentColor } from './util';\n\n\nclass Asteroid {\n  constructor() {\n    this.geom = new THREE.BoxGeometry(10,10,10,3,3,3);\n    // this.geom = new THREE.SphereGeometry(8, 8, 4);\n\n    this.mat = new THREE.MeshBasicMaterial({wireframe:true,\n      color: Colors.pinkNeon,\n      // shading: THREE.FlatShading,\n      // transparent:true,\n      // opacity:.9,\n    });\n\n    this.mesh = new THREE.Mesh(this.geom, this.mat);\n    this.mesh.castShadow = true;\n    // this.mesh.receiveShadow = true;\n  }\n}\n\nexport default Asteroid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/asteroid.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}